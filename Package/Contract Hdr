create or replace PROCEDURE buy_contract_headers (
    p_xml_data IN CLOB,
    p_out_status   OUT   VARCHAR2
) AS

    acct_doc   XMLTYPE := xmltype.createxml(p_xml_data);
    
  L_ERR_MSG VARCHAR2(4000);
  V_PROJECT_NUMBER XXSTG_PROJECTS.SEGMENT1%type;
  v_before_count number;
  v_after_count number;
 
    TYPE timerectyp IS RECORD (
        cont_header_id           NUMBER,
        po_header_id             NUMBER,
        contract_num             VARCHAR2(50),
        po_number                VARCHAR2(50),
        version                  NUMBER,
        version_type             VARCHAR2(1),
        intent                   VARCHAR2(30),
        buyer_id                 NUMBER,
        vendor_id                NUMBER,
        vendor_site_id           NUMBER,
        vendor_contact_id        NUMBER,
        currency_code            VARCHAR2(10),
        contract_status          VARCHAR2(30) 	
    ,
        org_id                   NUMBER,
        object_version_number    NUMBER,
        created_by               VARCHAR2(64),
        creation_date            DATE,
        last_updated_by          VARCHAR2(64),
        last_update_date         DATE,
        last_update_login        VARCHAR2(32),
        project_id               NUMBER,
        payment_term_id          NUMBER,
        payment_term             VARCHAR2(50),
        note_to_receiver         VARCHAR2(1000),
        adv_percent              NUMBER,
        adv_recovery_percent     NUMBER,
        reten_percent            NUMBER,
        contract_type            VARCHAR2(250),
        job_order_number         VARCHAR2(250),
        contract_name            VARCHAR2(2000),
        mat_onsite_percent       NUMBER,
        mat_onsite_rec_percent   NUMBER,
        rel_reten_percent        NUMBER,
        po_status                VARCHAR2(2000),
        
        instance_id              VARCHAR2(50) ,
         variation_amount         NUMBER,         
        contract_date             VARCHAR2(100)   
    );
    TYPE timetabtyp IS
        TABLE OF timerectyp INDEX BY BINARY_INTEGER;
    l_tbl      timetabtyp;
    CURSOR rec IS
    SELECT
        cont_header_id,
        po_header_id,
        'CONT-' || contract_num,
        po_number,
        version,
        'C' version_type,
        'B' intent,
        buyer_id,
        vendor_id,
        vendor_site_id,
        vendor_contact_id,
        currency_code,
        DECODE(CONTRACT_STATUS,'Y','ACTIVE','N','TRNS_CLOSED') CONTRACT_STATUS,
        org_id,
        object_version_number,
        created_by,
     --   NULL creation_date
       TO_DATE(TO_CHAR(to_timestamp_tz(creation_date, 'YYYY-MM-DD"T"HH24:MI:SS.ff3TZH:TZM'), 'YYYY-MM-DD'), 'YYYY-MM-DD') creation_date
        ,
        last_updated_by,
--        null last_update_date
        TO_DATE(TO_CHAR(to_timestamp_tz(last_update_date, 'YYYY-MM-DD"T"HH24:MI:SS.ff3TZH:TZM'), 'YYYY-MM-DD'), 'YYYY-MM-DD') last_update_date
        ,
        last_update_login,
        project_id,
        payment_term_id,
        payment_term,
        note_to_receiver,
        adv_percent,
        adv_recovery_percent,
        reten_percent,
        contract_type,
        job_order_number,
        contract_name,
        mat_onsite_percent,
        mat_onsite_rec_percent,
        rel_reten_percent,
        po_status,
        1 instance_id,
        0 variation_amount,
        sysdate contract_date 
        
        
        
    FROM
        XMLTABLE ( '/DATA_DS/G_1' PASSING acct_doc COLUMNS cont_header_id NUMBER PATH 'PO_HEADER_ID', po_header_id NUMBER PATH 'PO_HEADER_ID'
        , contract_num VARCHAR2(50) PATH 'PO_NUMBER', po_number VARCHAR2(50) PATH 'PO_NUMBER', version NUMBER PATH 'REVISION_NUM'
        , version_type VARCHAR2(1) PATH 'VERSION_TYPE', intent VARCHAR2(30) PATH 'INTENT', buyer_id NUMBER PATH 'AGENT_ID', vendor_id
        NUMBER PATH 'VENDOR_ID', vendor_site_id NUMBER PATH 'VENDOR_SITE_ID', vendor_contact_id NUMBER PATH 'VENDOR_CONTACT_ID', currency_code
        VARCHAR2(10) PATH 'CURRENCY_CODE', contract_status VARCHAR2(30) PATH 'APPROVED_FLAG', org_id NUMBER PATH 'ORG_ID', object_version_number
        NUMBER PATH 'OBJECT_VERSION_NUMBER', created_by VARCHAR2(64) PATH 'CREATED_BY  ', creation_date VARCHAR2(100) PATH 'CREATION_DATE'
        , last_updated_by VARCHAR2(64) PATH 'LAST_UPDATED_BY', last_update_date VARCHAR2(100) PATH 'LAST_UPDATE_DATE', last_update_login
        VARCHAR2(32) PATH 'LAST_UPDATE_LOGIN', project_id NUMBER PATH 'PJC_PROJECT_ID', payment_term_id NUMBER PATH 'PAYMENT_TERM_ID'
        , payment_term VARCHAR2(50) PATH 'PAYMENT_TERMS', note_to_receiver VARCHAR2(1000) PATH 'NOTE_TO_RECEIVER', adv_percent NUMBER
        PATH 'ADVANCE_PER', adv_recovery_percent NUMBER PATH 'ADVANCE_REC', reten_percent NUMBER PATH 'RETENTION', contract_type VARCHAR2
        (250) PATH 'CONTRACT_TYPE', job_order_number VARCHAR2(250) PATH 'JOB_ORDER_NUMBER', contract_name VARCHAR2(2000) PATH 'DESCRIPTION'
        , mat_onsite_percent NUMBER PATH 'MATERIAL_PER', mat_onsite_rec_percent NUMBER PATH 'MAT_ONSITE_REC_PERCENT', rel_reten_percent
        NUMBER PATH 'RETENTION_REL', po_status VARCHAR2(2000) PATH 'APPROVED_FLAG',
        instance_id  VARCHAR2(50)  PATH 'INSTANCE_ID', variation_amount  NUMBER    PATH 'VARIATION_AMOUNT',CONTRACT_DATE VARCHAR2(100) PATH 'CONTRACT_DATE');

BEGIN
    OPEN rec;
    FETCH rec BULK COLLECT INTO l_tbl;
    CLOSE rec;
    FOR i IN l_tbl.first..l_tbl.last LOOP
       -- v_cont_hdr_id :=l_tbl (i).CONT_HEADER_ID;
       -- v_version := l_tbl (i).VERSION;
       -- v_cont_status := l_tbl (i).CONTRACT_STATUS;
        begin
    SELECT SEGMENT1 INTO V_PROJECT_NUMBER
    FROM XXSTG_PROJECTS WHERE PROJECT_ID = l_tbl (i).PROJECT_ID;
    exception when others then null;
    end;

    begin
    SELECT count(*) INTO v_before_count
    FROM XXSC_CONTRACT_HEADERS;
    dbms_output.put_line('Before Count' || v_before_count );
    exception when others then null;
    end;
    BEGIN
     MERGE INTO xxsc_contract_headers a
    USING (
              SELECT
                  l_tbl(i).cont_header_id cont_header_id,
                  l_tbl(i).po_header_id po_header_id,
                  l_tbl(i).contract_num contract_num,
                  l_tbl(i).po_number po_number,
                  l_tbl(i).version version,
                  l_tbl(i).version_type version_type,
                  l_tbl(i).intent intent,
                  l_tbl(i).buyer_id buyer_id,
                  l_tbl(i).vendor_id vendor_id,
                  l_tbl(i).vendor_site_id vendor_site_id,
                  l_tbl(i).vendor_contact_id vendor_contact_id,
                  l_tbl(i).currency_code currency_code,
                  l_tbl(i).contract_status contract_status,
                  l_tbl(i).org_id org_id,
                  l_tbl(i).object_version_number object_version_number,
                  l_tbl(i).created_by created_by,
                  l_tbl(i).creation_date creation_date,
                  l_tbl(i).last_updated_by last_updated_by,
                  l_tbl(i).last_update_date last_update_date,
                  l_tbl(i).last_update_login last_update_login,
                  l_tbl(i).project_id project_id,
                  l_tbl(i).payment_term_id payment_term_id,
                  l_tbl(i).payment_term payment_term,
                  l_tbl(i).note_to_receiver note_to_receiver,
                  l_tbl(i).adv_percent adv_percent,
                  l_tbl(i).adv_recovery_percent adv_recovery_percent,
                  l_tbl(i).reten_percent reten_percent,
                  l_tbl(i).contract_type contract_type,
                  l_tbl(i).job_order_number job_order_number,
                  l_tbl(i).contract_name contract_name,
                  l_tbl(i).mat_onsite_percent mat_onsite_percent,
                  l_tbl(i).mat_onsite_rec_percent mat_onsite_rec_percent,
                  l_tbl(i).rel_reten_percent rel_reten_percent,
                  l_tbl(i).po_status po_status,
                  l_tbl(i).instance_id instance_id,
                  l_tbl(i).variation_amount variation_amount,
                  l_tbl(i).contract_date contract_date
              FROM
                  dual
          )
    b ON ( a.cont_header_id = b.cont_header_id
           AND a.version = b.version )
    WHEN MATCHED THEN UPDATE
    SET po_header_id = b.po_header_id,
        contract_num = b.contract_num,
        po_number = b.po_number,
--version                    =b.version,
        version_type = b.version_type,
        intent = b.intent,
        buyer_id = b.buyer_id,
        vendor_id = b.vendor_id,
        vendor_site_id = b.vendor_site_id,
        vendor_contact_id = b.vendor_contact_id,
        currency_code = b.currency_code,
        contract_status = DECODE(b.contract_status, 'DRAFT', 'TRNS_DRAFT', 'PENDING_APPROVAL', 'PEN', b.contract_status),
        org_id = b.org_id,
        object_version_number = b.object_version_number,
        created_by = b.created_by,
        creation_date = b.creation_date,
        last_updated_by = b.last_updated_by,
        last_update_date = b.last_update_date,
        last_update_login = b.last_update_login,
        project_id = b.project_id,
        payment_term_id = b.payment_term_id,
        payment_term = b.payment_term,
        note_to_receiver = b.note_to_receiver,
        adv_percent = b.adv_percent,
        adv_recovery_percent = b.adv_recovery_percent,
        reten_percent = b.reten_percent,
        contract_type = b.contract_type,
        job_order_number = b.job_order_number,
        contract_name = b.contract_name,
        mat_onsite_percent = b.mat_onsite_percent,
        mat_onsite_rec_percent = b.mat_onsite_rec_percent,
        rel_reten_percent = b.rel_reten_percent,
        po_status = b.po_status,
        instance_id=b.instance_id,
        variation_amount=b.variation_amount,
        contract_date=b.contract_date
        
    WHEN NOT MATCHED THEN
    INSERT (
        cont_header_id,
        po_header_id,
        contract_num,
        po_number,
        version,
        version_type,
        intent,
        buyer_id,
        vendor_id,
        vendor_site_id,
        vendor_contact_id,
        currency_code,
        contract_status,
        org_id,
        object_version_number,
        created_by,
        creation_date,
        last_updated_by,
        last_update_date,
        last_update_login,
        project_id,
        payment_term_id,
        payment_term,
        note_to_receiver,
        adv_percent,
        adv_recovery_percent,
        reten_percent,
        contract_type,
        job_order_number,
        contract_name,
        mat_onsite_percent,
        mat_onsite_rec_percent,
        rel_reten_percent,
        po_status,
        instance_id,
        variation_amount,
        contract_date)
    VALUES
        ( b.cont_header_id,
          b.po_header_id,
          b.contract_num,
          b.po_number,
          b.version,
          b.version_type,
          b.intent,
          b.buyer_id,
          b.vendor_id,
          b.vendor_site_id,
          b.vendor_contact_id,
          b.currency_code,
        DECODE(b.contract_status, 'DRAFT', 'TRNS_DRAFT', 'PENDING_APPROVAL', 'PEN', b.contract_status),
          b.org_id,
          b.object_version_number,
          b.created_by,
          b.creation_date,
          b.last_updated_by,
          b.last_update_date,
          b.last_update_login,
          b.project_id,
          b.payment_term_id,
          b.payment_term,
          b.note_to_receiver,
          b.adv_percent,
          b.adv_recovery_percent,
          b.reten_percent,
          b.contract_type,
          b.job_order_number,
          b.contract_name,
          b.mat_onsite_percent,
          b.mat_onsite_rec_percent,
          b.rel_reten_percent,
          b.po_status ,
          b.instance_id,
          b.variation_amount,
          b.contract_date);
begin
    SELECT count(*) INTO v_after_count
    FROM XXSC_CONTRACT_HEADERS;
    dbms_output.put_line('After Count' || v_after_count );
    exception when others then null;
    end;
    if(v_before_count < v_after_count) then
    UPDATE XXSC_CONTRACT_HEADERS
    SET VERSION_TYPE = 'H'
    WHERE CONT_HEADER_ID = l_tbl (i).CONT_HEADER_ID
    AND VERSION != l_tbl (i).VERSION;
    end if;
    EXCEPTION 
WHEN OTHERS THEN NULL;
    END;
    END LOOP;
 p_out_status := 'success';
    COMMIT;
    
   
begin
   XXSC_INTEGRATION_PKG.UPDATE_SC_VENDOR_TYPE;
--exception when others then
--L_ERR_MSG :=SQLERRM;
--INSERT INTO BPEL_ERROR VALUES ('1','BUY_CONTRACT_HEADERS',SYSDATE,L_ERR_MSG);
--COMMIT;
end;
END buy_contract_headers;
